import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

	test "propulsión" {
		naveVacia.propulsar()
		assert.equals(20000, naveVacia.velocidad())
	}

	test "prepararse para viajar" {
		naveLlena.prepararParaViajar()
		assert.equals(300000, naveLlena.velocidad())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

	test "propulsión" {
		naveConPasajeros.propulsar()
		assert.equals(300000, naveConPasajeros.velocidad())
	}

	test "encontrar enemigo" {
		naveSinPasajeros.encontrarEnemigo()
		assert.equals(20000, naveSinPasajeros.velocidad())
		assert.that(naveSinPasajeros.alarma())
	}

}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}

	test "prepararse para viajar1" {
		naveEnAtaque.prepararParaViajar()
		assert.equals(15000, naveEnAtaque.velocidad())
		assert.equals("Volviendo a la base", naveEnAtaque.ultimoMensaje())
	}

	test "prepararse para viajar2" {
		naveEnReposo.prepararParaViajar()
		assert.equals(15000, naveEnReposo.velocidad())
		assert.equals("Saliendo en misión", naveEnReposo.ultimoMensaje())
		assert.equals(ataque, naveEnReposo.modo())
	}

}

describe "Nave de residuos" {
	const naveResiduos1 = new NaveDeResiduos(carga = 5000, velocidad = 10000)
	const naveResiduos2 = new NaveDeResiduos(carga = 5000)

	test "recibir amenaza" {
		naveResiduos1.recibirAmenaza()
		assert.equals(0, naveResiduos1.velocidad())
		assert.equals(5000, naveResiduos1.carga())
	}

	test "prepararse para viajar" {
		naveResiduos2.prepararParaViajar()
		assert.equals(15000, naveResiduos2.velocidad())
		assert.that(naveResiduos2.sellada())
	}


}
